// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: orchard.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WatchInstruction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Action:
	//
	//	*WatchInstruction_PortForwardAction
	//	*WatchInstruction_SyncVmsAction
	//	*WatchInstruction_ResolveIpAction
	//	*WatchInstruction_ExecAction
	Action        isWatchInstruction_Action `protobuf_oneof:"action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchInstruction) Reset() {
	*x = WatchInstruction{}
	mi := &file_orchard_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstruction) ProtoMessage() {}

func (x *WatchInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_orchard_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstruction.ProtoReflect.Descriptor instead.
func (*WatchInstruction) Descriptor() ([]byte, []int) {
	return file_orchard_proto_rawDescGZIP(), []int{0}
}

func (x *WatchInstruction) GetAction() isWatchInstruction_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *WatchInstruction) GetPortForwardAction() *WatchInstruction_PortForward {
	if x != nil {
		if x, ok := x.Action.(*WatchInstruction_PortForwardAction); ok {
			return x.PortForwardAction
		}
	}
	return nil
}

func (x *WatchInstruction) GetSyncVmsAction() *WatchInstruction_SyncVMs {
	if x != nil {
		if x, ok := x.Action.(*WatchInstruction_SyncVmsAction); ok {
			return x.SyncVmsAction
		}
	}
	return nil
}

func (x *WatchInstruction) GetResolveIpAction() *WatchInstruction_ResolveIP {
	if x != nil {
		if x, ok := x.Action.(*WatchInstruction_ResolveIpAction); ok {
			return x.ResolveIpAction
		}
	}
	return nil
}

func (x *WatchInstruction) GetExecAction() *WatchInstruction_Exec {
	if x != nil {
		if x, ok := x.Action.(*WatchInstruction_ExecAction); ok {
			return x.ExecAction
		}
	}
	return nil
}

type isWatchInstruction_Action interface {
	isWatchInstruction_Action()
}

type WatchInstruction_PortForwardAction struct {
	PortForwardAction *WatchInstruction_PortForward `protobuf:"bytes,1,opt,name=port_forward_action,json=portForwardAction,proto3,oneof"`
}

type WatchInstruction_SyncVmsAction struct {
	SyncVmsAction *WatchInstruction_SyncVMs `protobuf:"bytes,2,opt,name=sync_vms_action,json=syncVmsAction,proto3,oneof"`
}

type WatchInstruction_ResolveIpAction struct {
	ResolveIpAction *WatchInstruction_ResolveIP `protobuf:"bytes,3,opt,name=resolve_ip_action,json=resolveIpAction,proto3,oneof"`
}

type WatchInstruction_ExecAction struct {
	ExecAction *WatchInstruction_Exec `protobuf:"bytes,4,opt,name=exec_action,json=execAction,proto3,oneof"`
}

func (*WatchInstruction_PortForwardAction) isWatchInstruction_Action() {}

func (*WatchInstruction_SyncVmsAction) isWatchInstruction_Action() {}

func (*WatchInstruction_ResolveIpAction) isWatchInstruction_Action() {}

func (*WatchInstruction_ExecAction) isWatchInstruction_Action() {}

type PortForwardData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortForwardData) Reset() {
	*x = PortForwardData{}
	mi := &file_orchard_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortForwardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortForwardData) ProtoMessage() {}

func (x *PortForwardData) ProtoReflect() protoreflect.Message {
	mi := &file_orchard_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortForwardData.ProtoReflect.Descriptor instead.
func (*PortForwardData) Descriptor() ([]byte, []int) {
	return file_orchard_proto_rawDescGZIP(), []int{1}
}

func (x *PortForwardData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExecData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecData) Reset() {
	*x = ExecData{}
	mi := &file_orchard_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecData) ProtoMessage() {}

func (x *ExecData) ProtoReflect() protoreflect.Message {
	mi := &file_orchard_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecData.ProtoReflect.Descriptor instead.
func (*ExecData) Descriptor() ([]byte, []int) {
	return file_orchard_proto_rawDescGZIP(), []int{2}
}

func (x *ExecData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResolveIPResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       string                 `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveIPResult) Reset() {
	*x = ResolveIPResult{}
	mi := &file_orchard_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveIPResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveIPResult) ProtoMessage() {}

func (x *ResolveIPResult) ProtoReflect() protoreflect.Message {
	mi := &file_orchard_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveIPResult.ProtoReflect.Descriptor instead.
func (*ResolveIPResult) Descriptor() ([]byte, []int) {
	return file_orchard_proto_rawDescGZIP(), []int{3}
}

func (x *ResolveIPResult) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *ResolveIPResult) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type WatchInstruction_PortForward struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// we can have multiple port forwards for the same vm/port pair
	// let's distinguish them by a unique session
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// can be empty to request port-forwarding to the worker itself
	VmUid         string `protobuf:"bytes,2,opt,name=vm_uid,json=vmUid,proto3" json:"vm_uid,omitempty"`
	Port          uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchInstruction_PortForward) Reset() {
	*x = WatchInstruction_PortForward{}
	mi := &file_orchard_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchInstruction_PortForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstruction_PortForward) ProtoMessage() {}

func (x *WatchInstruction_PortForward) ProtoReflect() protoreflect.Message {
	mi := &file_orchard_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstruction_PortForward.ProtoReflect.Descriptor instead.
func (*WatchInstruction_PortForward) Descriptor() ([]byte, []int) {
	return file_orchard_proto_rawDescGZIP(), []int{0, 0}
}

func (x *WatchInstruction_PortForward) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *WatchInstruction_PortForward) GetVmUid() string {
	if x != nil {
		return x.VmUid
	}
	return ""
}

func (x *WatchInstruction_PortForward) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type WatchInstruction_SyncVMs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchInstruction_SyncVMs) Reset() {
	*x = WatchInstruction_SyncVMs{}
	mi := &file_orchard_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchInstruction_SyncVMs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstruction_SyncVMs) ProtoMessage() {}

func (x *WatchInstruction_SyncVMs) ProtoReflect() protoreflect.Message {
	mi := &file_orchard_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstruction_SyncVMs.ProtoReflect.Descriptor instead.
func (*WatchInstruction_SyncVMs) Descriptor() ([]byte, []int) {
	return file_orchard_proto_rawDescGZIP(), []int{0, 1}
}

type WatchInstruction_ResolveIP struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// we can have multiple IP resolution requests for the same vm
	// let's distinguish them by a unique session
	Session       string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	VmUid         string `protobuf:"bytes,2,opt,name=vm_uid,json=vmUid,proto3" json:"vm_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchInstruction_ResolveIP) Reset() {
	*x = WatchInstruction_ResolveIP{}
	mi := &file_orchard_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchInstruction_ResolveIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstruction_ResolveIP) ProtoMessage() {}

func (x *WatchInstruction_ResolveIP) ProtoReflect() protoreflect.Message {
	mi := &file_orchard_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstruction_ResolveIP.ProtoReflect.Descriptor instead.
func (*WatchInstruction_ResolveIP) Descriptor() ([]byte, []int) {
	return file_orchard_proto_rawDescGZIP(), []int{0, 2}
}

func (x *WatchInstruction_ResolveIP) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *WatchInstruction_ResolveIP) GetVmUid() string {
	if x != nil {
		return x.VmUid
	}
	return ""
}

type WatchInstruction_Exec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// we can have multiple exec requests for the same vm
	// so use a session identifier
	Session       string                              `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	VmUid         string                              `protobuf:"bytes,2,opt,name=vm_uid,json=vmUid,proto3" json:"vm_uid,omitempty"`
	Command       string                              `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	Args          []string                            `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	Interactive   bool                                `protobuf:"varint,5,opt,name=interactive,proto3" json:"interactive,omitempty"`
	Tty           bool                                `protobuf:"varint,6,opt,name=tty,proto3" json:"tty,omitempty"`
	TerminalSize  *WatchInstruction_Exec_TerminalSize `protobuf:"bytes,7,opt,name=terminal_size,json=terminalSize,proto3" json:"terminal_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchInstruction_Exec) Reset() {
	*x = WatchInstruction_Exec{}
	mi := &file_orchard_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchInstruction_Exec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstruction_Exec) ProtoMessage() {}

func (x *WatchInstruction_Exec) ProtoReflect() protoreflect.Message {
	mi := &file_orchard_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstruction_Exec.ProtoReflect.Descriptor instead.
func (*WatchInstruction_Exec) Descriptor() ([]byte, []int) {
	return file_orchard_proto_rawDescGZIP(), []int{0, 3}
}

func (x *WatchInstruction_Exec) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *WatchInstruction_Exec) GetVmUid() string {
	if x != nil {
		return x.VmUid
	}
	return ""
}

func (x *WatchInstruction_Exec) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *WatchInstruction_Exec) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *WatchInstruction_Exec) GetInteractive() bool {
	if x != nil {
		return x.Interactive
	}
	return false
}

func (x *WatchInstruction_Exec) GetTty() bool {
	if x != nil {
		return x.Tty
	}
	return false
}

func (x *WatchInstruction_Exec) GetTerminalSize() *WatchInstruction_Exec_TerminalSize {
	if x != nil {
		return x.TerminalSize
	}
	return nil
}

type WatchInstruction_Exec_TerminalSize struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rows          uint32                 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	Cols          uint32                 `protobuf:"varint,2,opt,name=cols,proto3" json:"cols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchInstruction_Exec_TerminalSize) Reset() {
	*x = WatchInstruction_Exec_TerminalSize{}
	mi := &file_orchard_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchInstruction_Exec_TerminalSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchInstruction_Exec_TerminalSize) ProtoMessage() {}

func (x *WatchInstruction_Exec_TerminalSize) ProtoReflect() protoreflect.Message {
	mi := &file_orchard_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchInstruction_Exec_TerminalSize.ProtoReflect.Descriptor instead.
func (*WatchInstruction_Exec_TerminalSize) Descriptor() ([]byte, []int) {
	return file_orchard_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *WatchInstruction_Exec_TerminalSize) GetRows() uint32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *WatchInstruction_Exec_TerminalSize) GetCols() uint32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

var File_orchard_proto protoreflect.FileDescriptor

const file_orchard_proto_rawDesc = "" +
	"\n" +
	"\rorchard.proto\x1a\x1bgoogle/protobuf/empty.proto\"\xf3\x05\n" +
	"\x10WatchInstruction\x12O\n" +
	"\x13port_forward_action\x18\x01 \x01(\v2\x1d.WatchInstruction.PortForwardH\x00R\x11portForwardAction\x12C\n" +
	"\x0fsync_vms_action\x18\x02 \x01(\v2\x19.WatchInstruction.SyncVMsH\x00R\rsyncVmsAction\x12I\n" +
	"\x11resolve_ip_action\x18\x03 \x01(\v2\x1b.WatchInstruction.ResolveIPH\x00R\x0fresolveIpAction\x129\n" +
	"\vexec_action\x18\x04 \x01(\v2\x16.WatchInstruction.ExecH\x00R\n" +
	"execAction\x1aR\n" +
	"\vPortForward\x12\x18\n" +
	"\asession\x18\x01 \x01(\tR\asession\x12\x15\n" +
	"\x06vm_uid\x18\x02 \x01(\tR\x05vmUid\x12\x12\n" +
	"\x04port\x18\x03 \x01(\rR\x04port\x1a\t\n" +
	"\aSyncVMs\x1a<\n" +
	"\tResolveIP\x12\x18\n" +
	"\asession\x18\x01 \x01(\tR\asession\x12\x15\n" +
	"\x06vm_uid\x18\x02 \x01(\tR\x05vmUid\x1a\x9b\x02\n" +
	"\x04Exec\x12\x18\n" +
	"\asession\x18\x01 \x01(\tR\asession\x12\x15\n" +
	"\x06vm_uid\x18\x02 \x01(\tR\x05vmUid\x12\x18\n" +
	"\acommand\x18\x03 \x01(\tR\acommand\x12\x12\n" +
	"\x04args\x18\x04 \x03(\tR\x04args\x12 \n" +
	"\vinteractive\x18\x05 \x01(\bR\vinteractive\x12\x10\n" +
	"\x03tty\x18\x06 \x01(\bR\x03tty\x12H\n" +
	"\rterminal_size\x18\a \x01(\v2#.WatchInstruction.Exec.TerminalSizeR\fterminalSize\x1a6\n" +
	"\fTerminalSize\x12\x12\n" +
	"\x04rows\x18\x01 \x01(\rR\x04rows\x12\x12\n" +
	"\x04cols\x18\x02 \x01(\rR\x04colsB\b\n" +
	"\x06action\"%\n" +
	"\x0fPortForwardData\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"\x1e\n" +
	"\bExecData\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\";\n" +
	"\x0fResolveIPResult\x12\x18\n" +
	"\asession\x18\x01 \x01(\tR\asession\x12\x0e\n" +
	"\x02ip\x18\x02 \x01(\tR\x02ip2\xd2\x01\n" +
	"\n" +
	"Controller\x124\n" +
	"\x05Watch\x12\x16.google.protobuf.Empty\x1a\x11.WatchInstruction0\x01\x125\n" +
	"\vPortForward\x12\x10.PortForwardData\x1a\x10.PortForwardData(\x010\x01\x12 \n" +
	"\x04Exec\x12\t.ExecData\x1a\t.ExecData(\x010\x01\x125\n" +
	"\tResolveIP\x12\x10.ResolveIPResult\x1a\x16.google.protobuf.EmptyB#Z!github.com/cirruslabs/orchard/rpcb\x06proto3"

var (
	file_orchard_proto_rawDescOnce sync.Once
	file_orchard_proto_rawDescData []byte
)

func file_orchard_proto_rawDescGZIP() []byte {
	file_orchard_proto_rawDescOnce.Do(func() {
		file_orchard_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_orchard_proto_rawDesc), len(file_orchard_proto_rawDesc)))
	})
	return file_orchard_proto_rawDescData
}

var file_orchard_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_orchard_proto_goTypes = []any{
	(*WatchInstruction)(nil),                   // 0: WatchInstruction
	(*PortForwardData)(nil),                    // 1: PortForwardData
	(*ExecData)(nil),                           // 2: ExecData
	(*ResolveIPResult)(nil),                    // 3: ResolveIPResult
	(*WatchInstruction_PortForward)(nil),       // 4: WatchInstruction.PortForward
	(*WatchInstruction_SyncVMs)(nil),           // 5: WatchInstruction.SyncVMs
	(*WatchInstruction_ResolveIP)(nil),         // 6: WatchInstruction.ResolveIP
	(*WatchInstruction_Exec)(nil),              // 7: WatchInstruction.Exec
	(*WatchInstruction_Exec_TerminalSize)(nil), // 8: WatchInstruction.Exec.TerminalSize
	(*emptypb.Empty)(nil),                      // 9: google.protobuf.Empty
}
var file_orchard_proto_depIdxs = []int32{
	4, // 0: WatchInstruction.port_forward_action:type_name -> WatchInstruction.PortForward
	5, // 1: WatchInstruction.sync_vms_action:type_name -> WatchInstruction.SyncVMs
	6, // 2: WatchInstruction.resolve_ip_action:type_name -> WatchInstruction.ResolveIP
	7, // 3: WatchInstruction.exec_action:type_name -> WatchInstruction.Exec
	8, // 4: WatchInstruction.Exec.terminal_size:type_name -> WatchInstruction.Exec.TerminalSize
	9, // 5: Controller.Watch:input_type -> google.protobuf.Empty
	1, // 6: Controller.PortForward:input_type -> PortForwardData
	2, // 7: Controller.Exec:input_type -> ExecData
	3, // 8: Controller.ResolveIP:input_type -> ResolveIPResult
	0, // 9: Controller.Watch:output_type -> WatchInstruction
	1, // 10: Controller.PortForward:output_type -> PortForwardData
	2, // 11: Controller.Exec:output_type -> ExecData
	9, // 12: Controller.ResolveIP:output_type -> google.protobuf.Empty
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_orchard_proto_init() }
func file_orchard_proto_init() {
	if File_orchard_proto != nil {
		return
	}
	file_orchard_proto_msgTypes[0].OneofWrappers = []any{
		(*WatchInstruction_PortForwardAction)(nil),
		(*WatchInstruction_SyncVmsAction)(nil),
		(*WatchInstruction_ResolveIpAction)(nil),
		(*WatchInstruction_ExecAction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_orchard_proto_rawDesc), len(file_orchard_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orchard_proto_goTypes,
		DependencyIndexes: file_orchard_proto_depIdxs,
		MessageInfos:      file_orchard_proto_msgTypes,
	}.Build()
	File_orchard_proto = out.File
	file_orchard_proto_goTypes = nil
	file_orchard_proto_depIdxs = nil
}
